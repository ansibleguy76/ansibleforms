{
  "swagger": "2.0",
  "info": {
    "description": "This is the swagger interface for AnsibleForms.\r\nUse the `/auth/login` api with basic authentication to obtain a JWT token.\r\nThen use the access token, prefixed with the word '**Bearer**' to use all other api's.\r\nNote that the access token is limited in time.  You can then either login again and get a new set of tokens or use the `/token` api and the refresh token to obtain a new set (preferred).",
    "version": "5.0.10",
    "title": "AnsibleForms",
    "contact": {
      "email": "info@ansibleforms.com"
    }
  },
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "authentication",
      "description": "Authentication and refresh tokens"
    },
    {
      "name": "profile",
      "description": "Operations on profile"
    },
    {
      "name": "jobs",
      "description": "Operations about jobs"
    },
    {
      "name": "awx config",
      "description": "Operations on awx configuration"
    },
    {
      "name": "forms config",
      "description": "Operations on forms configuration"
    },
    {
      "name": "ldap config",
      "description": "Operations on ldap configuration"
    },
    {
      "name": "MS Entra Id config",
      "description": "Operations on MS Entra Id (aka azure AD) configuration"
    },
    {
      "name": "Open ID Connect config",
      "description": "Operations on Open ID Connect (OIDC) configuration"
    },
    {
      "name": "credentials",
      "description": "Operations on credentials"
    },
    {
      "name": "users",
      "description": "Operations about users"
    },
    {
      "name": "groups",
      "description": "Operations about groups"
    },
    {
      "name": "repositories",
      "description": "Operations about repositories"
    },
    {
      "name": "version",
      "description": "Get application version"
    },
    {
      "name": "expression",
      "description": "Invoke an expression query"
    },
    {
      "name": "query",
      "description": "Invoke an database query"
    },
    {
      "name": "general settings",
      "description": "Get and set general settings and test mail"
    },
    {
      "name": "datasources",
      "description": "Operations about datasources"
    },
    {
      "name": "schedules",
      "description": "Operations about schedules"
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/auth/login": {
      "post": {
        "tags": [
          "authentication"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "expiryDays",
            "type": "integer",
            "required": false,
            "description": "Expiry days, requires extendedTokenExpiration option to be set to true in role-options"
          }
        ],
        "summary": "Get authorization bearer token",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "token": "**********************",
                "refreshtoken": "***********************"
              }
            }
          }
        }
      }
    },
    "/token": {
      "post": {
        "tags": [
          "authentication"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "form payload",
            "schema": {
              "type": "object",
              "properties": {
                "refreshtoken": {
                  "type": "string",
                  "example": "**** your refresh token ****"
                }
              }
            }
          }
        ],
        "summary": "Refresh tokens",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "token": "************************",
                "refreshtoken": "**********************"
              }
            }
          }
        }
      }
    },
    "/profile": {
      "get": {
        "tags": [
          "profile"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Who am I",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "found user",
                "data": {
                  "output": {
                    "username": "admin",
                    "id": 1,
                    "type": "local",
                    "roles": [
                      "public",
                      "admin"
                    ]
                  },
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      },
      "put": {
        "tags": [
          "profile"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Change password",
        "parameters": [
          {
            "in": "body",
            "name": "Form Payload",
            "schema": {
              "type": "object",
              "properties": {
                "password": {
                  "type": "string",
                  "example": "************"
                }
              }
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "password changed",
                "data": {
                  "output": "",
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      }
    },
    "/job": {
      "post": {
        "tags": [
          "jobs"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "form payload",
            "schema": {
              "type": "object",
              "required": [
                "formName"
              ],
              "properties": {
                "formName": {
                  "type": "string",
                  "example": "Create Virtual Machine"
                },
                "extravars": {
                  "type": "object",
                  "example": {
                    "name": "vm1",
                    "datacenter": "dc1",
                    "cluster": "cluster1"
                  }
                },
                "credentials": {
                  "type": "object",
                  "example": {
                    "vcenterCredentials": "VCENTER"
                  }
                }
              }
            }
          }
        ],
        "summary": "Launch Job",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "info",
                "message": "succesfully launched form Create Virtual Machine",
                "data": {
                  "output": {
                    "id": 91
                  },
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      },
      "get": {
        "tags": [
          "jobs"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get jobs history",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "jobs found",
                "data": {
                  "output": [
                    {
                      "id": 91,
                      "form": "Dummy form",
                      "playbook": "dummy.yaml",
                      "status": "success",
                      "start": "2021-12-06T09:53:49.000Z",
                      "end": "2021-12-06T10:53:50.000Z",
                      "user": "Administrator",
                      "user_type": "ldap"
                    },
                    {
                      "id": 90,
                      "form": "Backup Ansibleforms",
                      "playbook": "ansibleforms_backup.yaml",
                      "status": "success",
                      "start": "2021-12-06T09:52:14.000Z",
                      "end": "2021-12-06T10:52:17.000Z",
                      "user": "Administrator",
                      "user_type": "ldap"
                    },
                    {
                      "id": 89,
                      "form": "Demo Form Ansible No input",
                      "playbook": "dummy.yaml",
                      "status": "success",
                      "start": "2021-12-06T09:52:07.000Z",
                      "end": "2021-12-06T10:52:08.000Z",
                      "user": "Administrator",
                      "user_type": "ldap"
                    },
                    {
                      "id": 88,
                      "form": "Cleanup Ansibleforms Jobs",
                      "playbook": "ansibleforms_job_cleanup.yaml",
                      "status": "success",
                      "start": "2021-12-06T09:18:17.000Z",
                      "end": "2021-12-06T10:18:19.000Z",
                      "user": "Administrator",
                      "user_type": "ldap"
                    }
                  ],
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      }
    },
    "/job/{jobId}": {
      "get": {
        "tags": [
          "jobs"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "type": "integer",
            "required": true,
            "description": "Numeric ID of the job to get."
          },
          {
            "in": "query",
            "name": "text",
            "type": "boolean",
            "required": false,
            "description": "Get plain text output."
          }
        ],
        "summary": "Get job output",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "job ran successfully",
                "data": {
                  "output": "[WARNING]: Unable to parse\r\n/root/ansible_forms/server/persistent/playbooks/string as an inventory source\r\n\r\n[WARNING]: No inventory was parsed, only implicit localhost is available\r\n\r\n[WARNING]: provided hosts list is empty, only localhost is available. Note that\r\nthe implicit localhost does not match 'all'\r\n\r\nPLAY [This is a hello-world example] *******************************************\r\n\r\nTASK [Gathering Facts] *********************************************************\r\n\r\nok: [localhost]\r\n\r\nPLAY RECAP *********************************************************************\r\nlocalhost                  : ok=1    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0\r\n\r\n",
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "jobs"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "type": "integer",
            "required": true,
            "description": "Numeric ID of the job to delete."
          }
        ],
        "summary": "Delete Ansible job from history",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "job deleted",
                "data": {
                  "output": "",
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      }
    },
    "/job/{jobId}/abort": {
      "post": {
        "tags": [
          "jobs"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "type": "integer",
            "required": true,
            "description": "Numeric ID of the job to abort."
          }
        ],
        "summary": "Abort job",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "job aborted",
                "data": {
                  "output": "",
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      }
    },
    "/job/{jobId}/relaunch": {
      "post": {
        "tags": [
          "jobs"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "type": "integer",
            "required": true,
            "description": "Numeric ID of the job to relaunch."
          }
        ],
        "summary": "Relaunch job",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "job relaunched with job id 123",
                "data": {
                  "output": "",
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      }
    },
    "/job/{jobId}/approve": {
      "post": {
        "tags": [
          "jobs"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "type": "integer",
            "required": true,
            "description": "Numeric ID of the job to approve."
          }
        ],
        "summary": "Approve job",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "job approved",
                "data": {
                  "output": "",
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      }
    },
    "/job/{jobId}/reject": {
      "post": {
        "tags": [
          "jobs"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "type": "integer",
            "required": true,
            "description": "Numeric ID of the job to reject."
          }
        ],
        "summary": "Reject job",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "job rejected",
                "data": {
                  "output": "",
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      }
    },
    "/awx": {
      "get": {
        "tags": [
          "awx config"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get AWX configuration",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "Awx found",
                "data": {
                  "output": {
                    "uri": "http://10.0.0.1",
                    "token": "***** secret awx token *****",
                    "use_credentials": false,
                    "username": "admin",
                    "password": "***** secret awx password *****"
                  },
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      },
      "put": {
        "tags": [
          "awx config"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "form payload",
            "schema": {
              "type": "object",
              "properties": {
                "uri": {
                  "type": "string",
                  "example": "https://10.0.0.1"
                },
                "token": {
                  "type": "string",
                  "example": "MySecretTokenForAWX"
                },
                "use_credentials": {
                  "type": "boolean",
                  "example": false
                },
                "username": {
                  "type": "string",
                  "example": "MyUsernameForAWX"
                },
                "password": {
                  "type": "string",
                  "example": "MySecretPasswordForAWX"
                }
              }
            }
          }
        ],
        "summary": "Set AWX configuration",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "Awx updated",
                "data": {
                  "output": "",
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      }
    },
    "/awx/check": {
      "post": {
        "tags": [
          "awx config"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "form payload",
            "schema": {
              "type": "object",
              "properties": {
                "uri": {
                  "type": "string",
                  "example": "https://10.0.0.1"
                },
                "token": {
                  "type": "string",
                  "example": "MySecretTokenForAWX"
                },
                "use_credentials": {
                  "type": "boolean",
                  "example": false
                },
                "username": {
                  "type": "string",
                  "example": "MyUsernameForAWX"
                },
                "password": {
                  "type": "string",
                  "example": "MySecretPasswordForAWX"
                }
              }
            }
          }
        ],
        "summary": "Test AWX configuration",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "Awx Connection is OK",
                "data": {
                  "output": "",
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      }
    },
    "/settings": {
      "get": {
        "tags": [
          "general settings"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get general settings",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "Settings found",
                "data": {
                  "output": {
                    "mail_server": "relay.domain.local",
                    "mail_port": 25,
                    "mail_secure": 0,
                    "mail_username": "",
                    "mail_password": "",
                    "mail_from": "ansibleforms@domain.local",
                    "url": "https://ansibleforms"
                  },
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      },
      "put": {
        "tags": [
          "general settings"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "general settings",
            "schema": {
              "type": "object",
              "properties": {
                "mail_server": {
                  "type": "string",
                  "example": "relay.domain.local"
                },
                "mail_port": {
                  "type": "integer",
                  "example": 25
                },
                "mail_username": {
                  "type": "string",
                  "example": ""
                },
                "mail_password": {
                  "type": "string",
                  "example": ""
                },
                "mail_secure": {
                  "type": "boolean",
                  "example": false
                },
                "mail_from": {
                  "type": "string",
                  "example": "ansibleforms@domain.local"
                },
                "url": {
                  "type": "string",
                  "example": "https://ansibleforms"
                }
              }
            }
          }
        ],
        "summary": "Set general settings",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "Settings updated",
                "data": {
                  "output": "",
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      }
    },
    "/settings/mailcheck": {
      "post": {
        "tags": [
          "general settings"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "mail test settings",
            "schema": {
              "type": "object",
              "properties": {
                "mail_server": {
                  "type": "string",
                  "example": "relay.domain.local"
                },
                "mail_port": {
                  "type": "integer",
                  "example": 25
                },
                "mail_username": {
                  "type": "string",
                  "example": ""
                },
                "mail_password": {
                  "type": "string",
                  "example": ""
                },
                "mail_secure": {
                  "type": "boolean",
                  "example": false
                },
                "mail_from": {
                  "type": "string",
                  "example": "ansibleforms@domain.local"
                },
                "to": {
                  "type": "string",
                  "example": "testuser@domain.local"
                }
              }
            }
          }
        ],
        "summary": "Test Mail",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "Mail is sent (<430e7527-c0da-197a-5171-ee3ad546668b@domain.local>)",
                "data": {
                  "output": "",
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      }
    },
    "/config": {
      "get": {
        "tags": [
          "forms config"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get forms configuration",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "categories": [
                  {
                    "name": "Default",
                    "icon": "bars"
                  },
                  {
                    "name": "Maintenance",
                    "icon": "cogs"
                  }
                ],
                "roles": [
                  {
                    "name": "admin",
                    "groups": [
                      "local/admins",
                      "ldap/Domain Admins"
                    ]
                  },
                  {
                    "name": "operator",
                    "groups": [
                      "local/operator"
                    ]
                  },
                  {
                    "name": "demo",
                    "groups": [
                      "local/demo"
                    ]
                  },
                  {
                    "name": "public",
                    "groups": []
                  }
                ],
                "forms": [
                  {
                    "name": "Demo Form Ansible No input",
                    "roles": [
                      "public"
                    ],
                    "description": "This workflow will kickoff the vanilla ansible dummy playbook.",
                    "categories": [
                      "Demo",
                      "Ansible"
                    ],
                    "tileClass": "has-background-warning-light",
                    "playbook": "dummy.yaml",
                    "inventory": "",
                    "type": "ansible",
                    "fields": []
                  }
                ]
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      },
      "put": {
        "tags": [
          "forms config"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "forms config",
            "schema": {
              "type": "object",
              "properties": {
                "categories": {
                  "type": "object",
                  "example": [
                    {
                      "name": "Default",
                      "icon": "bars"
                    },
                    {
                      "name": "Maintenance",
                      "icon": "cogs"
                    }
                  ]
                },
                "roles": {
                  "type": "object",
                  "example": [
                    {
                      "name": "admin",
                      "groups": [
                        "local/admins",
                        "ldap/Domain Admins"
                      ]
                    },
                    {
                      "name": "operator",
                      "groups": [
                        "local/operator"
                      ]
                    },
                    {
                      "name": "demo",
                      "groups": [
                        "local/demo"
                      ]
                    },
                    {
                      "name": "public",
                      "groups": []
                    }
                  ]
                },
                "forms": {
                  "type": "object",
                  "example": [
                    {
                      "name": "Demo Form Ansible No input",
                      "roles": [
                        "public"
                      ],
                      "description": "This workflow will kickoff the vanilla ansible dummy playbook.",
                      "categories": [
                        "Demo",
                        "Ansible"
                      ],
                      "tileClass": "has-background-warning-light",
                      "playbook": "dummy.yaml",
                      "inventory": "",
                      "type": "ansible",
                      "fields": []
                    }
                  ]
                }
              }
            }
          }
        ],
        "summary": "Set forms configuration",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "forms saved",
                "data": {
                  "output": "",
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      }
    },
    "/config/backups": {
      "get": {
        "tags": [
          "forms config"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get forms backups",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "example": [
                {
                  "file": "forms.yaml.bak.20220202211155442",
                  "date": "2022-02-02 21:11:55"
                },
                {
                  "file": "forms.yaml.bak.20220202210424591",
                  "date": "2022-02-02 21:04:24"
                },
                {
                  "file": "forms.yaml.bak.20220202154024068",
                  "date": "2022-02-02 15:40:24"
                }
              ]
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      }
    },
    "/config/restore/{backupName}": {
      "post": {
        "tags": [
          "forms config"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "backupName",
            "type": "string",
            "required": true,
            "description": "The backup name"
          },
          {
            "in": "query",
            "name": "backupBeforeRestore",
            "type": "boolean",
            "required": false,
            "description": "Make a backup of the current forms before restore"
          }
        ],
        "summary": "Restores forms configuration",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "Backup is restored",
                "data": {
                  "output": "",
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      }
    },
    "/config/check": {
      "post": {
        "tags": [
          "forms config"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "ldap config",
            "schema": {
              "type": "object",
              "properties": {
                "categories": {
                  "type": "object",
                  "example": [
                    {
                      "name": "Default",
                      "icon": "bars"
                    },
                    {
                      "name": "Maintenance",
                      "icon": "cogs"
                    }
                  ]
                },
                "roles": {
                  "type": "object",
                  "example": [
                    {
                      "name": "admin",
                      "groups": [
                        "local/admins",
                        "ldap/Domain Admins"
                      ]
                    },
                    {
                      "name": "operator",
                      "groups": [
                        "local/operator"
                      ]
                    },
                    {
                      "name": "demo",
                      "groups": [
                        "local/demo"
                      ]
                    },
                    {
                      "name": "public",
                      "groups": []
                    }
                  ]
                },
                "forms": {
                  "type": "object",
                  "example": [
                    {
                      "name": "Demo Form Ansible No input",
                      "roles": [
                        "public"
                      ],
                      "description": "This workflow will kickoff the vanilla ansible dummy playbook.",
                      "categories": [
                        "Demo",
                        "Ansible"
                      ],
                      "tileClass": "has-background-warning-light",
                      "playbook": "dummy.yaml",
                      "inventory": "",
                      "type": "ansible",
                      "fields": []
                    }
                  ]
                }
              }
            }
          }
        ],
        "summary": "Validate forms configuration",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "new forms config is valid",
                "data": {
                  "output": "",
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      }
    },
    "/ldap": {
      "get": {
        "tags": [
          "ldap config"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get ldap configuration",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "Ldap found",
                "data": {
                  "output": {
                    "server": "ldapserver",
                    "port": 636,
                    "ignore_certs": 1,
                    "enable_tls": 1,
                    "cert": "",
                    "ca_bundle": "",
                    "bind_user_dn": "cn=Administrator,cn=Users,dc=slash,dc=local",
                    "bind_user_pw": "*** password ***",
                    "search_base": "dc=domain,dc=local",
                    "username_attribute": "sAMAccountName",
                    "enable": 1
                  },
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ldap config"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "ldap config",
            "schema": {
              "type": "object",
              "properties": {
                "server": {
                  "type": "string",
                  "example": "ad.domain.local"
                },
                "port": {
                  "type": "integer",
                  "example": 636
                },
                "ignore_certs": {
                  "type": "boolean",
                  "example": true
                },
                "enable_tls": {
                  "type": "boolean",
                  "example": true
                },
                "cert": {
                  "type": "string",
                  "example": "-----BEGIN CERTIFICATE-----\r\nMIICUTCCAf...QQGEw\r\n-----END CERTIFICATE-----"
                },
                "ca_bundle": {
                  "type": "string",
                  "example": "-----BEGIN CERTIFICATE-----\r\nMIICUTCCAf...QQGEw\r\n-----END CERTIFICATE-----"
                },
                "bind_user_dn": {
                  "type": "string",
                  "example": "cn=Administrator, cn=Users, dc=domain, dc=local"
                },
                "bind_user_pw": {
                  "type": "string",
                  "example": "************"
                },
                "username_attribute": {
                  "type": "string",
                  "example": "sAMAccountName"
                },
                "enable": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          }
        ],
        "summary": "Set ldap configuration",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "Ldap updated",
                "data": {
                  "output": "",
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      }
    },
    "/ldap/check": {
      "post": {
        "tags": [
          "ldap config"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "ldap config",
            "schema": {
              "type": "object",
              "properties": {
                "server": {
                  "type": "string",
                  "example": "ad.domain.local"
                },
                "port": {
                  "type": "integer",
                  "example": 636
                },
                "ignore_certs": {
                  "type": "boolean",
                  "example": true
                },
                "enable_tls": {
                  "type": "boolean",
                  "example": true
                },
                "cert": {
                  "type": "string",
                  "example": "-----BEGIN CERTIFICATE-----\r\nMIICUTCCAf...QQGEw\r\n-----END CERTIFICATE-----"
                },
                "ca_bundle": {
                  "type": "string",
                  "example": "-----BEGIN CERTIFICATE-----\r\nMIICUTCCAf...QQGEw\r\n-----END CERTIFICATE-----"
                },
                "bind_user_dn": {
                  "type": "string",
                  "example": "cn=Administrator, cn=Users, dc=domain, dc=local"
                },
                "bind_user_pw": {
                  "type": "string",
                  "example": "************"
                },
                "username_attribute": {
                  "type": "string",
                  "example": "sAMAccountName"
                }
              }
            }
          }
        ],
        "summary": "Check ldap configuration",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "Ldap updated",
                "data": {
                  "output": "",
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      }
    },
    "/azuread": {
      "get": {
        "tags": [
          "MS Entra Id config"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get MS Entra Id configuration",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "Azure AD found",
                "data": {
                  "output": {
                    "client_id": "client_id",
                    "secret_id": "*** secret_id ***",
                    "enable": 1
                  },
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      },
      "put": {
        "tags": [
          "MS Entra Id config"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "MS Entra Id config",
            "schema": {
              "type": "object",
              "properties": {
                "client_id": {
                  "type": "string",
                  "example": "my_client_id"
                },
                "bind_user_pw": {
                  "type": "string",
                  "example": "my_secret_id"
                },
                "enable": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          }
        ],
        "summary": "Set Azure AD configuration",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "Azure AD updated",
                "data": {
                  "output": "",
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      }
    },
    "/oidc": {
      "get": {
        "tags": [
          "Open ID Connect config"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get OIDC configuration",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "OIDC",
                "data": {
                  "output": {
                    "issuer": "issuer",
                    "client_id": "client_id",
                    "secret_id": "*** secret_id ***",
                    "redirect_uris": "redirect_uris",
                    "post_logout_redirect_uris": "post_logout_redirect_uris",
                    "enable": 1
                  },
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Open ID Connect config"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "OIDC config",
            "schema": {
              "type": "object",
              "properties": {
                "issuer": {
                  "type": "string",
                  "example": "https://server.example.com"
                },
                "client_id": {
                  "type": "string",
                  "example": "my_client_id"
                },
                "bind_user_pw": {
                  "type": "string",
                  "example": "my_secret_id"
                },
                "enable": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          }
        ],
        "summary": "Set OIDC configuration",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "OIDC updated",
                "data": {
                  "output": "",
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      }
    },
    "/credential": {
      "get": {
        "tags": [
          "credentials"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list of credentials",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter on a specific credential name"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "credentials found",
                "data": {
                  "output": [
                    {
                      "id": 1,
                      "name": "CONN1",
                      "user": "root",
                      "host": "172.16.50.1",
                      "port": 3306,
                      "description": "Localconnection"
                    },
                    {
                      "id": 2,
                      "name": "CONN2",
                      "user": "sa",
                      "host": "172.16.50.2",
                      "port": 1433,
                      "description": "mssql test"
                    },
                    {
                      "id": 3,
                      "name": "CONN3",
                      "user": "postgres",
                      "host": "172.16.50.3",
                      "port": 5432,
                      "description": "Postgres test"
                    },
                    {
                      "id": 4,
                      "name": "CONN4",
                      "user": "root",
                      "host": "172.16.50.4",
                      "port": 27017,
                      "description": "mongodb"
                    }
                  ],
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      },
      "post": {
        "tags": [
          "credentials"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "form payload",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "cmdb"
                },
                "host": {
                  "type": "string",
                  "example": "10.0.0.1"
                },
                "port": {
                  "type": "integer",
                  "example": "3306"
                },
                "user": {
                  "type": "string",
                  "example": "root"
                },
                "password": {
                  "type": "string",
                  "example": "************"
                },
                "description": {
                  "type": "string",
                  "example": "Mysql credentials to cmdb"
                }
              }
            }
          }
        ],
        "summary": "Create new credential",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "credential added",
                "data": {
                  "output": 6,
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      }
    },
    "/credential/{credentialId}": {
      "get": {
        "tags": [
          "credentials"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get a credential",
        "parameters": [
          {
            "in": "path",
            "name": "credentialId",
            "type": "integer",
            "required": true,
            "description": "Numeric ID of the credential to get."
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "found credential",
                "data": {
                  "output": {
                    "id": 2,
                    "name": "cmdb",
                    "user": "root",
                    "password": "************",
                    "host": "172.16.50.1",
                    "port": 3306,
                    "description": "Mysql connection for cmdb"
                  },
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      },
      "put": {
        "tags": [
          "credentials"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update a credential",
        "parameters": [
          {
            "in": "path",
            "name": "credentialId",
            "type": "integer",
            "required": true,
            "description": "Numeric ID of the credential to update."
          },
          {
            "in": "body",
            "name": "Form Payload",
            "schema": {
              "type": "object",
              "properties": {
                "user": {
                  "type": "string",
                  "example": "root"
                },
                "password": {
                  "type": "string",
                  "example": "************"
                },
                "host": {
                  "type": "string",
                  "example": "172.16.50.1"
                },
                "port": {
                  "type": "string",
                  "example": 3306
                },
                "description": {
                  "type": "string",
                  "example": "Mysql connection for cmdb"
                }
              }
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "credential updated",
                "data": {
                  "output": "",
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "credentials"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete a credential",
        "parameters": [
          {
            "in": "path",
            "name": "credentialId",
            "type": "integer",
            "required": true,
            "description": "Numeric ID of the credential to delete."
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "credential deleted",
                "data": {
                  "output": "",
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      }
    },
    "/credential/testdb/{credentialId}": {
      "get": {
        "tags": [
          "credentials"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Test a credential against a database",
        "parameters": [
          {
            "in": "path",
            "name": "credentialId",
            "type": "integer",
            "required": true,
            "description": "Numeric ID of the credential to get."
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "Mysql connection success",
                "data": {
                  "output": "",
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      }
    },
    "/user": {
      "get": {
        "tags": [
          "users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list of users",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "username",
            "schema": {
              "type": "string"
            },
            "description": "Filter on a specific username"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "users found",
                "data": {
                  "output": [
                    {
                      "id": 1,
                      "username": "admin",
                      "group_id": 1
                    },
                    {
                      "id": 2,
                      "username": "operator1",
                      "group_id": 2
                    }
                  ],
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "form payload",
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "example": "operator1"
                },
                "password": {
                  "type": "string",
                  "example": "************"
                },
                "group_id": {
                  "type": "integer",
                  "example": 2
                }
              }
            }
          }
        ],
        "summary": "Create new user",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "user added",
                "data": {
                  "output": 2,
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      }
    },
    "/user/{userId}": {
      "get": {
        "tags": [
          "users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get a user",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "type": "integer",
            "required": true,
            "description": "Numeric ID of the user to get."
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "found user",
                "data": {
                  "output": {
                    "id": 2,
                    "username": "operator1",
                    "group_id": 2
                  },
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update a user",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "type": "integer",
            "required": true,
            "description": "Numeric ID of the user to update."
          },
          {
            "in": "body",
            "name": "Form Payload",
            "schema": {
              "type": "object",
              "properties": {
                "password": {
                  "type": "string",
                  "example": "************"
                },
                "password2": {
                  "type": "string",
                  "example": "************"
                },
                "group_id": {
                  "type": "integer",
                  "example": 2
                }
              }
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "user updated",
                "data": {
                  "output": "",
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete a user",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "type": "integer",
            "required": true,
            "description": "Numeric ID of the user to delete."
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "user deleted",
                "data": {
                  "output": "",
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      }
    },
    "/group": {
      "get": {
        "tags": [
          "groups"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list of groups",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter on a specific group name"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "groups found",
                "data": {
                  "output": [
                    {
                      "id": 1,
                      "name": "admins"
                    },
                    {
                      "id": 2,
                      "name": "operators"
                    }
                  ],
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      },
      "post": {
        "tags": [
          "groups"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "form payload",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "operators"
                }
              }
            }
          }
        ],
        "summary": "Create new group",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "group added",
                "data": {
                  "output": 2,
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      }
    },
    "/group/{groupId}": {
      "get": {
        "tags": [
          "groups"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get a group",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "type": "integer",
            "required": true,
            "description": "Numeric ID of the group to get."
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "found group",
                "data": {
                  "output": {
                    "id": 2,
                    "name": "operators"
                  },
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "groups"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete a group",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "type": "integer",
            "required": true,
            "description": "Numeric ID of the group to delete."
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "group deleted",
                "data": {
                  "output": "",
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      }
    },
    "/repository": {
      "get": {
        "tags": [
          "repositories"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get list of repositories",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "repositories found",
                "data": {
                  "output": [
                    {
                      "id": 1,
                      "name": "myrepo",
                      "user": "myaccount",
                      "uri": "https://github.com/vcmirko/dev_forms.git",
                      "description": "test repo",
                      "status": "success",
                      "output": "Running command : git pull --verbose\r\nPOST git-upload-pack (155 bytes)\n\r\nPOST git-upload-pack (373 bytes)\n\r\nFrom https://github.com/vcmirko/dev_forms\n   56bda5d..42fcf72  main       -> origin/main\n\r\nUpdating 56bda5d..42fcf72\nFast-forward\n\r\n",
                      "head": "42fcf72\n",
                      "rebase_on_start": 1
                    }
                  ],
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      },
      "post": {
        "tags": [
          "repositories"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "form payload",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "my_name"
                },
                "user": {
                  "type": "string",
                  "example": "myuser"
                },
                "password": {
                  "type": "string",
                  "example": "mypersonalaccesstoken"
                },
                "uri": {
                  "type": "string",
                  "example": "git@github.com:myrepo"
                },
                "description": {
                  "type": "string",
                  "example": "My cool repository"
                },
                "rebase_on_start": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          }
        ],
        "summary": "Create new repository",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "repository added",
                "data": {
                  "output": 2,
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      }
    },
    "/repository/{repositoryName}": {
      "get": {
        "tags": [
          "repositories"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get a repository by name",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repositoryName",
            "type": "string",
            "required": true,
            "description": "The repository name"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "found repository",
                "data": {
                  "output": {
                    "id": 1,
                    "name": "myrepo",
                    "user": "myuser",
                    "password": "ghp_xxxxxxxxxxxxx",
                    "uri": "https://github.com/myaccount/myrepo.git",
                    "description": "test repo",
                    "use_for_forms": 1,
                    "use_for_playbooks": 0,
                    "cron": null,
                    "status": "success",
                    "output": "Running command : git pull --verbose\r\nPOST git-upload-pack (155 bytes)\n\r\nPOST git-upload-pack (373 bytes)\n\r\nFrom https://github.com/myaccount/myrepo\n   56bda5d..42fcf72  main       -> origin/main\n\r\nUpdating 56bda5d..42fcf72\nFast-forward\n\r\n",
                    "head": "42fcf72\n",
                    "rebase_on_start": 1
                  },
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "repositories"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete a repository",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Repo directory name to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "repository deleted",
                "data": {
                  "output": "",
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      },
      "put": {
        "tags": [
          "repositories"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "form payload",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "my_name"
                },
                "user": {
                  "type": "string",
                  "example": "myuser"
                },
                "password": {
                  "type": "string",
                  "example": "mypersonalaccesstoken"
                },
                "uri": {
                  "type": "string",
                  "example": "git@github.com:myrepo"
                },
                "description": {
                  "type": "string",
                  "example": "My cool repository"
                },
                "rebase_on_start": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          }
        ],
        "summary": "Update a repository",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "repository updated",
                "data": {
                  "output": "",
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      }
    },
    "/repository/{repositoryName}/clone": {
      "post": {
        "tags": [
          "repositories"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repositoryName",
            "type": "string",
            "required": true,
            "description": "The repository name"
          }
        ],
        "summary": "Clones a repistory",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "Repository is cloned",
                "data": {
                  "output": "",
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      }
    },
    "/repository/{repositoryName}/pull": {
      "post": {
        "tags": [
          "repositories"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repositoryName",
            "type": "string",
            "required": true,
            "description": "The repository name"
          }
        ],
        "summary": "Pulls a repistory",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "Repository is pulled",
                "data": {
                  "output": "",
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      }
    },
    "/version": {
      "get": {
        "tags": [
          "version"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get version",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "1.1.6",
                "data": {
                  "output": "",
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      }
    },
    "/expression": {
      "post": {
        "tags": [
          "expression"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "form payload",
            "schema": {
              "type": "object",
              "required": [
                "expression"
              ],
              "properties": {
                "expression": {
                  "type": "string",
                  "example": "fn.fnRestBasic('get','https://gorest.co.in/public/v1/users','','','[.data[]]')"
                }
              }
            }
          },
          {
            "in": "query",
            "name": "noLog",
            "schema": {
              "type": "boolean"
            },
            "description": "Disable logging"
          }
        ],
        "summary": "Invoke expression query",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "successfully executed expression fn.fnRestBasic('get','https://gorest.co.in/public/v1/users','','','[.data[]]')",
                "data": {
                  "output": [
                    {
                      "id": 2514,
                      "name": "sss",
                      "email": "a@a.com",
                      "gender": "female",
                      "status": "active"
                    },
                    {
                      "id": 2058,
                      "name": "Z57KQEB51",
                      "email": "f3d3ulp9fiwj@gmail.com",
                      "gender": "male",
                      "status": "active"
                    }
                  ],
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      }
    },
    "/query": {
      "post": {
        "tags": [
          "query"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "form payload",
            "schema": {
              "type": "object",
              "required": [
                "config",
                "query"
              ],
              "properties": {
                "config": {
                  "type": "object",
                  "example": {
                    "name": "MSSQL",
                    "type": "mssql"
                  }
                },
                "query": {
                  "type": "string",
                  "example": "select * FROM cmdb.dbo.city;"
                }
              }
            }
          },
          {
            "in": "query",
            "name": "noLog",
            "schema": {
              "type": "boolean"
            },
            "description": "Disable logging"
          }
        ],
        "summary": "Invoke database query",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "query ran successfully",
                "data": {
                  "output": [
                    {
                      "name": "london",
                      "country": "UK"
                    },
                    {
                      "name": "paris",
                      "country": "FRANCE"
                    },
                    {
                      "name": "brussels",
                      "country": "BELGIUM"
                    },
                    {
                      "name": "amsterdam",
                      "country": "HOLLAND"
                    },
                    {
                      "name": "berlin",
                      "country": "GERMANY"
                    }
                  ],
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      }
    },
    "/datasource": {
      "get": {
        "tags": [
          "datasources"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Retrieve all datasources",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "datasources found",
                "data": {
                  "output": [
                    {
                      "id": 1,
                      "name": "datasource1",
                      "schema": "schema1",
                      "cron": "0 * * * *",
                      "status": "success",
                      "output": "",
                      "queue_id": 641,
                      "last_run": "2025-03-10T11:59:38.000Z",
                      "state": "idle",
                      "form": null,
                      "extra_vars": null
                    },
                    {
                      "id": 3,
                      "name": "datasource2",
                      "schema": "schema1",
                      "cron": "0 * * * *",
                      "status": "success",
                      "output": "",
                      "queue_id": 641,
                      "last_run": "2025-03-10T11:59:48.000Z",
                      "state": "idle",
                      "form": null,
                      "extra_vars": null
                    },
                    {
                      "id": 4,
                      "name": "excel",
                      "schema": "schema_excel",
                      "cron": "",
                      "status": "success",
                      "output": "1",
                      "queue_id": 432,
                      "last_run": "2025-03-05T10:22:09.000Z",
                      "state": "idle",
                      "form": "datasource_excel",
                      "extra_vars": null
                    }
                  ],
                  "error": ""
                }
              }
            }
          }
        },
        "401": {
          "description": "unauthorized",
          "schema": {
            "type": "string",
            "example": "Authorize with a valid Bearer access token"
          }
        }
      },
      "post": {
        "tags": [
          "datasources"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a new datasource",
        "parameters": [
          {
            "in": "body",
            "name": "datasource",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "schema": {
                  "type": "string"
                },
                "extra_vars": {
                  "type": "string"
                },
                "form": {
                  "type": "string"
                },
                "cron": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "datasource added",
                "data": {
                  "output": 2,
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      }
    },
    "/datasource/{id}": {
      "get": {
        "tags": [
          "datasources"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Retrieve a single datasource with id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "required": true,
            "description": "Numeric ID of the datasource to get."
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "found datasource",
                "data": {
                  "output": {
                    "id": 6,
                    "name": "datasource3",
                    "schema": "cm_storage",
                    "cron": "* * * * *",
                    "status": "success",
                    "output": "",
                    "queue_id": 651,
                    "last_run": "2025-03-10T12:26:43.000Z",
                    "state": "idle",
                    "form": "test",
                    "extra_vars": ""
                  },
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      },
      "put": {
        "tags": [
          "datasources"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update a datasource with id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "required": true,
            "description": "Numeric ID of the datasource to update."
          },
          {
            "in": "body",
            "name": "datasource",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "schema": {
                  "type": "string"
                },
                "extra_vars": {
                  "type": "string"
                },
                "form": {
                  "type": "string"
                },
                "cron": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "datasource updated",
                "data": {
                  "output": "",
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "datasources"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete a datasource with id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "required": true,
            "description": "Numeric ID of the datasource to delete."
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "datasource deleted",
                "data": {
                  "output": "",
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      }
    },
    "/datasource/{id}/import": {
      "post": {
        "tags": [
          "datasources"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Import a datasource by id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "required": true,
            "description": "Numeric ID of the datasource to import."
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "datasource imported",
                "data": {
                  "output": "",
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      }
    },
    "/datasource/schema": {
      "get": {
        "tags": [
          "datasources"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Retrieve all datasourceSchemas",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "schemas found",
                "data": {
                  "output": [
                    {
                      "id": 3,
                      "name": "team",
                      "description": null,
                      "table_definitions": "hobby:\n- name: name\n  unique: true\nperson:\n- name: firstname\n  unique: true\n- name: lastname\n  unique: true\n- name: age\n  type: int\n- name: hobby\n  foreign_key: hobby\n  constraint_actions: delete_set_null\n",
                      "status": "success",
                      "output": ""
                    }
                  ],
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      },
      "post": {
        "tags": [
          "datasources"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a new datasourceSchema",
        "parameters": [
          {
            "in": "body",
            "name": "datasourceSchema",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "table_definitions": {
                  "type": "string"
                },
                "force": {
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "datasourceSchema added",
                "data": {
                  "output": 2,
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      }
    },
    "/datasource/schema/{id}": {
      "get": {
        "tags": [
          "datasources"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Retrieve a single datasourceSchema with id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "required": true,
            "description": "Numeric ID of the datasourceSchema to get."
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "found datasourceSchema",
                "data": {
                  "output": {
                    "id": 3,
                    "name": "team",
                    "description": null,
                    "table_definitions": "hobby:\n- name: name\n  unique: true\nperson:\n- name: firstname\n  unique: true\n- name: lastname\n  unique: true\n- name: age\n  type: int\n- name: hobby\n  foreign_key: hobby\n  constraint_actions: delete_set_null\n",
                    "status": "success",
                    "output": ""
                  },
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      },
      "put": {
        "tags": [
          "datasources"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update a datasourceSchema with id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "required": true,
            "description": "Numeric ID of the datasourceSchema to update."
          },
          {
            "in": "body",
            "name": "datasourceSchema",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "table_definitions": {
                  "type": "string"
                },
                "force": {
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "datasourceSchema updated",
                "data": {
                  "output": "",
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "datasources"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete a datasourceSchema with id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "required": true,
            "description": "Numeric ID of the datasourceSchema to delete."
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "datasourceSchema deleted",
                "data": {
                  "output": "",
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      }
    },
    "/datasource/schema/{id}/reset": {
      "post": {
        "tags": [
          "datasources"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Reset a datasourceSchema by id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "required": true,
            "description": "Numeric ID of the datasourceSchema to reset."
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "datasourceSchema reset",
                "data": {
                  "output": "",
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      }
    },
    "/schedule": {
      "get": {
        "tags": [
          "schedules"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Retrieve all schedules",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "schedules found",
                "data": {
                  "output": [
                    {
                      "id": 1,
                      "name": "schedule1",
                      "cron": "0 * * * *",
                      "status": "success",
                      "output": "",
                      "queue_id": 641,
                      "last_run": "2025-03-10T11:59:38.000Z",
                      "state": "idle",
                      "form": null,
                      "extra_vars": null
                    },
                    {
                      "id": 3,
                      "name": "schedule2",
                      "cron": "0 * * * *",
                      "status": "success",
                      "output": "",
                      "queue_id": 641,
                      "last_run": "2025-03-10T11:59:48.000Z",
                      "state": "idle",
                      "form": null,
                      "extra_vars": null
                    }
                  ],
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      },
      "post": {
        "tags": [
          "schedules"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a new schedule",
        "parameters": [
          {
            "in": "body",
            "name": "schedule",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "extra_vars": {
                  "type": "string"
                },
                "form": {
                  "type": "string"
                },
                "cron": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "schedule added",
                "data": {
                  "output": 2,
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      }
    },
    "/schedule/{id}": {
      "get": {
        "tags": [
          "schedules"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Retrieve a single schedule with id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "required": true,
            "description": "Numeric ID of the schedule to get."
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "found schedule",
                "data": {
                  "output": {
                    "id": 6,
                    "name": "schedule3",
                    "cron": "* * * * *",
                    "status": "success",
                    "output": "",
                    "queue_id": 651,
                    "last_run": "2025-03-10T12:26:43.000Z",
                    "state": "idle",
                    "form": "test",
                    "extra_vars": ""
                  },
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      },
      "put": {
        "tags": [
          "schedules"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update a schedule with id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "required": true,
            "description": "Numeric ID of the schedule to update."
          },
          {
            "in": "body",
            "name": "schedule",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "extra_vars": {
                  "type": "string"
                },
                "form": {
                  "type": "string"
                },
                "cron": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "schedule updated",
                "data": {
                  "output": "",
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "schedules"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete a schedule with id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "required": true,
            "description": "Numeric ID of the schedule to delete."
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "schedule deleted",
                "data": {
                  "output": "",
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      }
    },
    "/schedule/{id}/launch": {
      "post": {
        "tags": [
          "schedules"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Launch a schedule by id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "required": true,
            "description": "Numeric ID of the schedule to launch."
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "status": "success",
                "message": "schedule launched",
                "data": {
                  "output": "",
                  "error": ""
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "type": "string",
              "example": "Authorize with a valid Bearer access token"
            }
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "basicAuth": {
      "type": "basic"
    },
    "bearerAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}